ax(accumulator): 可用于存放函数返回值
bp(base pointer): 用于存放执行中的函数对应的栈帧的栈底地址
sp(stack poinger): 用于存放执行中的函数对应的栈帧的栈顶地址
ip(instruction pointer): 指向当前执行指令的下一条指令

不同架构的CPU，寄存器名称被添以不同前缀以指示寄存器的大小。
例如对于x86架构，字母“e”用作名称前缀，指示各寄存器大小为32位；
对于x86_64寄存器，字母“r”用作名称前缀，指示各寄存器大小为64位。

litaodeMacBook-Pro:staticlink litao$ objdump -h -s -d ab

ab:	file format Mach-O 64-bit x86-64

_main:
100000f14:	55 	pushq	%rbp
100000f15:	48 89 e5 	movq	%rsp, %rbp
100000f18:	48 83 ec 10 	subq	$16, %rsp
100000f1c:	c7 45 fc 64 00 00 00 	movl	$100, -4(%rbp)
100000f23:	48 8d 45 fc 	leaq	-4(%rbp), %rax
100000f27:	48 8d 15 d2 00 00 00 	leaq	210(%rip), %rdx
100000f2e:	48 89 d6 	movq	%rdx, %rsi
100000f31:	48 89 c7 	movq	%rax, %rdi
100000f34:	b8 00 00 00 00 	movl	$0, %eax
100000f39:	e8 07 00 00 00 	callq	7 <_reset>
100000f3e:	b8 00 00 00 00 	movl	$0, %eax
100000f43:	c9 	leave
100000f44:	c3 	retq

_reset:
100000f45:	55 	pushq	%rbp
100000f46:	48 89 e5 	movq	%rsp, %rbp
100000f49:	48 89 7d f8 	movq	%rdi, -8(%rbp)
100000f4d:	48 89 75 f0 	movq	%rsi, -16(%rbp)
100000f51:	48 8b 45 f0 	movq	-16(%rbp), %rax
100000f55:	8b 10 	movl	(%rax), %edx
100000f57:	48 8b 45 f8 	movq	-8(%rbp), %rax
100000f5b:	89 10 	movl	%edx, (%rax)
100000f5d:	90 	nop
100000f5e:	5d 	popq	%rbp
100000f5f:	c3 	retq
Sections:
Idx Name          Size      Address          Type
  0 __text        0000004c 0000000100000f14 TEXT 
  1 __eh_frame    000000a0 0000000100000f60 DATA 
  2 __data        00000004 0000000100001000 DATA 
Contents of section __text:
 100000f14 554889e5 4883ec10 c745fc64 00000048  UH..H....E.d...H
 100000f24 8d45fc48 8d15d200 00004889 d64889c7  .E.H......H..H..
 100000f34 b8000000 00e80700 0000b800 000000c9  ................
 100000f44 c3554889 e548897d f8488975 f0488b45  .UH..H.}.H.u.H.E
 100000f54 f08b1048 8b45f889 10905dc3           ...H.E....].
Contents of section __eh_frame:
 100000f60 14000000 00000000 017a5200 01781001  .........zR..x..
 100000f70 100c0708 90010000 34000000 1c000000  ........4.......
 100000f80 94ffffff ffffffff 31000000 00000000  ........1.......
 100000f90 00040100 00000e10 86020403 0000000d  ................
 100000fa0 06042c00 00000c07 08000000 00000000  ..,.............
 100000fb0 14000000 00000000 017a5200 01781001  .........zR..x..
 100000fc0 100c0708 90010000 34000000 1c000000  ........4.......
 100000fd0 75ffffff ffffffff 1b000000 00000000  u...............
 100000fe0 00040100 00000e10 86020403 0000000d  ................
 100000ff0 06041600 00000c07 08000000 00000000  ................
Contents of section __data:
 100001000 01000000                             ....